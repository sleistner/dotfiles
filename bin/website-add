#!/usr/bin/env ruby

require 'rubygems'
require 'colorize'

VHOST_CONF_TPL =<<-CONF
<VirtualHost *:80>
  ServerName www.{domain}
  ServerAdmin webmaster@{domain}
  ServerAlias {domain}

  DocumentRoot /home/{domain}/web/current/public

  <Directory /home/{domain}/web/current/public>
    Include conf.d/common/options_and_allows.conf
  </Directory>

  Include conf.d/common/maintenance.conf

  LogLevel warn
  CustomLog logs/{domain}.log combined
</VirtualHost>

# vim:syntax=apache:tw=2:sw=2:
CONF

def out(*msg)
  puts '', *msg
end

at_exit { out '*** Done ***'.colorize(:color => :yellow) }

def changes
  @changes ||= []
end

def resetable?
  !changes.empty?
end

def reset_changes
  changes.each do |cmd|
    out "* Undoing: #{cmd[:desc]}"; cmd[:down].call if cmd[:down]
  end
end

def fail_safe(msg = nil)
  out '*** Failure ***'.colorize(:red), msg || 'unexpected error'
  reset_changes if resetable? && yes?('Reset changes?')
  exit
end

def execute(cmd = nil, *args)
  cmd_str = "#{cmd} #{args.join(' ')}"
  puts "#{cmd_str.ljust(70, ' ')} [#{(result = system(cmd, *args)).to_s.colorize(result ? :green : :red)}]"
  raise 'Executing #{cmd_str} failed!' unless result
end

def create_vhost_config(file, domain)
  if !File.file?(file) || yes?("Apache VHost configuration file #{vhost_file} exists. Overwrite?")
    File.open(file, 'w') { |f| f << VHOST_CONF_TPL.gsub(/\{domain\}/, domain) }
  end
end

def input(msg)
  print "\n#{msg}: ".colorize(:yellow)
  STDIN.gets.chomp.strip
end

def yes?(question, default = :yes)
  answer = input("#{question} [#{default}]")
  (answer.length > 0 ? answer : default.to_s) =~ /y/i
end

def prompt_and_restart_httpd
  out 'Check Apache Configuartion'
  system('service', 'httpd', 'configtest')

  if yes?('Restart Apache Webserver?', :no)
    system('service', 'httpd', 'restart')
  end
end

domain = ARGV.shift || ''

while(domain.length < 1)
  domain = input('Please enter a domain name (e.g. example.com)')
end

home_dir    = "/home/#{domain}"
vhost_file  = File.join('/', 'etc', 'httpd', 'conf.d', "#{domain}.conf")
release_dir = "/home/#{domain}/web/releases/#{Time.now.to_i}"

commands = [

  { :desc  => "Create user #{domain}.",
    :up    => lambda { execute('/usr/sbin/useradd', domain) },
    :down  => lambda { execute('/usr/sbin/userdel', domain); execute('rm', '-rf', home_dir) } },

  { :desc  => "Create #{release_dir}.",
    :up    => lambda { execute('mkdir', '-p', release_dir) },
    :down  => lambda { execute('rm', '-rf', release_dir) } },

  #{ :desc  => "Create #{release_dir}.",
    #:up    => lambda { execute('mkdir', '-p', release_dir) },
    #:down  => lambda { execute('rm', '-rf', release_dir) } },

  { :desc  => "Change #{home_dir} directory permissions.",
    :up    => lambda { execute('chmod', 'uga+rx', home_dir) } },

  { :desc  => "Create Apache vhost entry #{vhost_file}.",
    :up    => lambda { create_vhost_config(vhost_file, domain); prompt_and_restart_httpd },
    :down  => lambda { execute('rm', '-rf', vhost_file); prompt_and_restart_httpd } }
]

commands.each do |cmd|
  out "* #{cmd[:desc]}"
  cmd[:up].call rescue fail_safe($!)
  changes << cmd
end
