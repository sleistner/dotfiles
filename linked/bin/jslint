#!/usr/bin/env ruby

JSLINT_PATH = File.expand_path('~/.vim/plugin/jslint')
PATTERNS = Hash.new { |h, k| h[k.to_sym] = k }.merge({
  :has_own_property => 'the body of a for in should be wrapped in an if statement to filter unwanted properties',
  :trailing_comma =>  'extra comma',
  :mixed_spaces_and_tabs => 'mixed spaces and tabs'
})

require "optparse"

options = { :mate => false, :mvim => false, :search_dir => nil }

ARGV.options do |opts|
  opts.banner = "Usage: #{File.basename($PROGRAM_NAME)} path pattern"
  opts.on('-v', '--vim', 'Open resulting files in MacVim') do |mvim|
    options[:mvim] = mvim
  end
  opts.on('-m', '--mate', 'Open resulting files in Textmate') do |mate|
    options[:mate] = mate
  end
  opts.on('-h', '--help', 'Display this message') do
    puts opts, '', 'Available pattern:', PATTERNS.keys.map { |p| " - #{p}" }
    exit
  end

  begin
    options[:search_dir] = File.expand_path(ARGV.shift)
  rescue
    puts opts
    exit
  end
  opts.parse!
end

search_pattern = /#{PATTERNS[(ARGV.shift || '.').to_sym]}/
affected_files = []
occurrences = 0
messages = {}

puts 'Searching for:', search_pattern.source, '', 'at:', options[:search_dir], '', '*' * 100, ''

Dir["#{options[:search_dir]}/**/*.js"].each do |file|
  output = nil
  if (res = %x[jslint.sh #{File.expand_path(file)}]) =~ search_pattern
    res.split("\n").each do |line|
      if line =~ search_pattern
         (output ||= [file]) << /js\((\d+)\)/.match(line)[1]
         (messages[line.split(': ').last.to_sym] ||= []) << 1
         occurrences += 1
      end
    end
    affected_files << file
    puts output.shift, "Line: #{output * ', '}", ''
  end
end

puts "Affected files: #{affected_files.length}."
puts "JsLint warning/error occurrences: #{occurrences}."
puts "Messages:", messages.map { |(message, times)| "#{"%02d" % times.length} times: #{message}" }.sort.reverse

if options[:mate]
  `mate #{affected_files * ' '}`
end

if options[:mvim]
  `mvim -p #{affected_files * ' '}`
end
