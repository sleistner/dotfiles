" .vimrc
" created by wolfger@spearwolf.de !2002-2009
" last modified: 05.01.2012
" extended by sleistner@gmail.com

" --- general options -------------- --- --  -
filetype off
call pathogen#runtime_append_all_bundles()
call pathogen#helptags()

set nocompatible
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set cindent
set foldmethod=marker
set laststatus=2
set cmdheight=2
set hlsearch
set incsearch
set showcmd
set ruler
set nowrap
set wildmode=full
set wildmenu
set ttyfast
set hidden
set display=lastline,uhex
"set number

set encoding=utf-8
set termencoding=utf-8

" no backups
set nobackup
set nowritebackup

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

syntax on

let c_comment_strings = 1
let mapleader = ","

" --- auto commands -------------- --- --  -

if has("autocmd")

    " Enable file type detection.
    filetype plugin indent on

    autocmd BufRead,BufNewFile *.jst set filetype=html
    autocmd BufRead,BufNewFile *.ftl set filetype=html

    " Rails plugin autocmds
    autocmd User Rails.javascript* set ai nosi ts=4 sw=4 sts=4

    autocmd User Rails Rnavcommand factory spec/factories -suffix=.rb -default=model()
    autocmd User Rails Rnavcommand sass app/sass -suffix=.scss -default=stylesheet()

    autocmd User Rails Rnavcommand jsmodel      app/assets/javascripts/backbone/models          -suffix=.js     -default=javascripts()
    autocmd User Rails Rnavcommand jscollection app/assets/javascripts/backbone/collections     -suffix=.js     -default=javascripts()
    autocmd User Rails Rnavcommand jsview       app/assets/javascripts/backbone/views           -suffix=.js     -default=javascripts()
    autocmd User Rails Rnavcommand jsrouter     app/assets/javascripts/backbone/routers         -suffix=.js     -default=javascripts()
    autocmd User Rails Rnavcommand jstemplate   app/assets/javascripts/backbone/templates       -suffix=.haml   -default=javascripts()

    autocmd User Rails Rnavcommand jsspec       spec/javascripts                                -suffix=_spec.js -default=javascripts()

    autocmd User Rails Rnavcommand feature features -suffix=.feature
    autocmd User Rails Rnavcommand step features/step_definitions -suffix=.rb

    autocmd FileType text setlocal textwidth=78

    autocmd FileType js,scss,sass,css setlocal ai nosi sw=4 ts=4 sts=4

    autocmd FileType html,rhtml,xml,feature,cucumber setlocal ai nosi sw=2 ts=2 sts=2 et

    autocmd FileType ruby,eruby setlocal sw=2 ts=2 sts=2

    " When editing a file, always jump to the last known cursor position.
    " Don't do it when the position is invalid or when inside an event handler
    " (happens when dropping a file on gvim).
    autocmd BufReadPost *
                \ if line("'\"") > 0 && line("'\"") <= line("$") |
                \   exe "normal g`\"" |
                \ endif

else

    set autoindent

endif


" --- viminfo -------------- --- --  -

" The idea of "viminfo" is to save info from one editing session for the
" next by saving the data in an viminfo file". So next time I satrt up Vim I
" can use the search patterns from the search history and the commands from
" the command line again. I can also load files again with a simple ":b
" bufname". And Vim also remember where the cursor was in the files I
" edited. See ":help viminfo" for more info on Vim's "viminfo". :-}

set viminfo=%,'50,\"100,:100,n~/.viminfo

set dir=~/.tmp

set list
set list listchars=tab:»·,trail:·

" Tab completion options
" (only complete to the longest unambiguous match, and show a menu)
set completeopt=longest,menuone
set wildmode=list:longest,list:full
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
inoremap <expr> <C-n> pumvisible() ? '<C-n>' : '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
inoremap <expr> <M-,> pumvisible() ? '<C-n>' : '<C-x><C-o><C-n><C-p><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

" case only matters with mixed case expressions
set ignorecase
set smartcase

" Tags
let g:Tlist_Ctags_Cmd="ctags --exclude='*.js'"

" /ack

" ======== mappings ========================== === ==  =

"map <leader>a :Ack<space>
map <leader>b :BufExplorer<CR>
map <leader>c :copen<CR>
map <leader>r :Rename<space>
map <leader>i :set invlist<CR>
map <leader>w :set nowrap!<CR>
"map <leader>f :CommandTFlush<CR>

"NERD_Commenter Toggle
map <silent> <leader>, <leader>c<space>

" NERDTree settings (launch with \nt or \\)
let g:NERDTreeQuitOnOpen = 0
map <silent> <leader>e :NERDTreeToggle<CR>
map <silent> <leader>` :NERDTreeFind<CR>

" Check ruby syntax
map <leader>v :!ruby -c %:.<CR>

" Move complete block one line down or up with <M-Down> and <M-Up> keys
vmap <silent> <C-M-Up> :m'<-2<CR>gv
vmap <silent> <C-M-Down> :m'>+1<CR>gv
"nmap <C-M-Up> ddkp
"nmap <C-M-Down> ddp

" Make p in Visual mode replace the selected text with the "" register.
vnoremap p <Esc>:let current_reg = @"<CR>gvs<C-R>=current_reg<CR><Esc>

inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a

if exists(":Tabularize")
  nmap <Leader>a= :Tabularize /=<CR>
  vmap <Leader>a= :Tabularize /=<CR>
  nmap <Leader>a: :Tabularize /:\zs<CR>
  vmap <Leader>a: :Tabularize /:\zs<CR>
endif

function! s:align()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction

" --- normal mode -------------- --- --  -
map <S-Insert> <MiddleMouse>
map! <S-Insert> <MiddleMouse>

" Jump into tags (and <Alt-Left> to go back)
map <silent> <F3> <C-]>
map <silent> <M-Left> <C-T>

" Switch between tabs (vim7 only!)
map <silent> <A-D-Left> :tabprevious<cr>
map <silent> <A-D-Right> :tabnext<cr>

function! RmTrailingWhitespaces()
  let pos = getpos('.')
  :%s/\s*$//ge
  call setpos('.', pos)
endf

" When editing a file, always jump to the last cursor position
autocmd BufWritePre * call RmTrailingWhitespaces()

" --- insert mode -------------- --- --  -

" Textmate(ruby) like insert ' => '
imap <silent> <C-l> <Space>=><Space>

" -- abbreviations -------------------------- --- --  -

iabbr <%- <%- -%><Esc>hhhi
iabbr <%= <%= %><Esc>hhi
iabbr <%# <%= %><Esc>hhi

set statusline=[%n]\ %<%.99f\ %h%w%m%r%y%{exists('g:loaded_rvm')?rvm#statusline():''}%=%-16(\ %l,%c-%v\ %)%P

nnoremap <Leader>H :call<SID>LongLineHLToggle()<cr>
hi OverLength ctermbg=none cterm=none
match OverLength /\%>80v/
fun! s:LongLineHLToggle()
 if !exists('w:longlinehl')
  let w:longlinehl = matchadd('ErrorMsg', '.\%>120v', 0)
  echo "Long lines highlighted"
 else
  call matchdelete(w:longlinehl)
  unl w:longlinehl
  echo "Long lines unhighlighted"
 endif
endfunction

